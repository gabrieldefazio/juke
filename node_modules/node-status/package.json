{
  "_args": [
    [
      {
        "raw": "node-status@^0.1.7",
        "scope": null,
        "escapedName": "node-status",
        "name": "node-status",
        "rawSpec": "^0.1.7",
        "spec": ">=0.1.7 <0.2.0",
        "type": "range"
      },
      "/Users/gabrieldefazio/fullstackJR/juke-react"
    ]
  ],
  "_from": "node-status@>=0.1.7 <0.2.0",
  "_id": "node-status@0.1.7",
  "_inCache": true,
  "_location": "/node-status",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-status-0.1.7.tgz_1459455125242_0.4752860714215785"
  },
  "_npmUser": {
    "name": "derrickpelletier",
    "email": "derrick@dpelletier.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-status@^0.1.7",
    "scope": null,
    "escapedName": "node-status",
    "name": "node-status",
    "rawSpec": "^0.1.7",
    "spec": ">=0.1.7 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-status/-/node-status-0.1.7.tgz",
  "_shasum": "03e814fa06963932eb199f0788f68f12166f911e",
  "_shrinkwrap": null,
  "_spec": "node-status@^0.1.7",
  "_where": "/Users/gabrieldefazio/fullstackJR/juke-react",
  "author": {
    "name": "Derrick Pelletier",
    "email": "derrick@dpelletier.com",
    "url": "http://dpelletier.com"
  },
  "bugs": {
    "url": "https://github.com/derrickpelletier/node-status/issues"
  },
  "dependencies": {
    "charm": "~0.2.0",
    "colors": "*"
  },
  "description": "A live status bar generator for node.js",
  "devDependencies": {
    "chai": "~1.6.0",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "03e814fa06963932eb199f0788f68f12166f911e",
    "tarball": "https://registry.npmjs.org/node-status/-/node-status-0.1.7.tgz"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "704589ea328ad29e551bd3d529bbe0afc8f2208a",
  "homepage": "http://github.com/derrickpelletier/node-status.git",
  "keywords": [
    "terminal",
    "status",
    "statusbar",
    "bar",
    "console",
    "progress"
  ],
  "main": "status",
  "maintainers": [
    {
      "name": "derrickpelletier",
      "email": "derrick@dpelletier.com"
    }
  ],
  "name": "node-status",
  "optionalDependencies": {},
  "readme": "# Status!\n\nMakes a little stdout status bar. Currently something I made to use for tooling in node.\nVery early/rough stage, changing often.\n\n```\nnpm install node-status\n```\n\n## An example!\n\t// Initialize the item with options\n\n\tvar status = require('node-status')\n\n\tvar pizzas = status.addItem(\"pizza\", {\n\t  type: ['bar','percentage'],\n\t  max: 8\n\t})\n\n\t// Start the status-bar\n\tstatus.start()\n\n\t// Increment the item whenever you need it updated\n\tpizzas.inc()\n\tpizzas.inc(3)\n\n\n**Example output:** (More examples in `example.js`)\n\n![image](http://f.cl.ly/items/1O3P0D1g0v1O373u1T1y/animated_status_bar.gif)\n\n\n\n## Config\nStatus accepts the following config options on start():\n+ `invert`: defaults to *true*.\n+ `interval`: defaults to 250. Number of milliseconds per re-draw interval.\n+ `label`: defaults to \"Status\".\n\n```\nstatus.start({\n\tinvert: false,\n\tinterval: 200\n})\n```\n\n## Item Options\n\nAll item options are optional.\n\n+ `type`: defaults to 'count'. Accepts a single type, or an array of types:\n\t+ `function(item){ retun item.count }`: specify a type as a custom function to process\n\t+ `count`: displays the current count. Will display count/max if max is specified.\n\t+ `bar`: displays a progress bar of ten segments. Only displays if `max` is set.\n\t+ `percentage`: displays a percentage to 2 decimals. Only displays if `max` is set. Precision can be set manually.\n\t+ `time`: displays the current time since the application started.\n\t+ `text`: use to display a string value, set as the text property of the item.\n+ `name`: defaults to item name. The label that precedes the count/status.\n+ `count`: defaults to 0 (zero). Can specify a starting count.\n+ `max`: Will cause 'count' type to display as \\<count>/\\<max>. ***Required*** for some types. Can be a number or a function that returns a number.\n+ `color`: Status uses [Color](https://github.com/Marak/colors.js) to colorize labels. Specifiy colors as strings.\n+ `precision`: defaults to 2. The precision used in percentages.\n\n\n\n## Using Console.log alongside status\nRight now, if you have to use `console.log` after the status bar has started, it can be a bit janky because the stdout line isn't cleared when a console.log is run.\n\nYou can utilize an extended console.log by adding this after requiring status.\n\n\tconsole = status.console()\n\n\n## Todo's\n+ Add an option to have the bar always at the bottom of the terminal window or just at the bottom of the current page\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/derrickpelletier/node-status.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.7"
}
